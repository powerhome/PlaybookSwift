# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'httparty'

default_platform(:ios)

target_ios = 'PlaybookShowcase-iOS'
build_path = "Build"
derived_data_path = "DerivedData"
ios_plist = "PlaybookShowcase/PlaybookShowcase/Info.plist"

desc "Build iOS"
lane :build_ios do |opts|

  export_method = 'ad-hoc'

  gym(
    project: './PlaybookShowcase/PlaybookShowcase.xcodeproj',
    scheme: target_ios,
    skip_package_dependencies_resolution: false,
    export_method: export_method,
    output_name: "#{target_ios}.ipa",
    build_path: build_path,
    derived_data_path: derived_data_path,
    xcargs: '-skipPackagePluginValidation'
  )
end

desc "Install provisioning profiles"
lane :install_prov_profiles do
  sh 'cp -r ./../git_prov_profiles ./git_prov_profiles'
  Dir.glob("./git_prov_profiles/profiles/*.mobileprovision") do |item|
    install_provisioning_profile(path: item)
  end

  Dir.glob("./git_prov_profiles/profiles_macos/*.provisionprofile") do |item|
    install_provisioning_profile(path: item)
  end
end

desc "Upload iOS build"
lane :upload_ios do |opts|
  keep_trying {
    ship_ios_to_appcenter(opts)
  }
end

desc "Sets the AppCenter app key"
  lane :set_appcenter_secret do |opts|

    if opts[:target] == "PlaybookShowcase-iOS"
      case opts[:env]
      when "beta"
        displayName = "Playbook Showcase Beta"
        secret = "c919a21e-0c50-4299-b974-18c54920e809"
      when "production"
        displayName = "Playbook Showcase"
        secret = "8853374d-fe92-47b6-95c3-ce6a1ce66d41"
      else
        displayName = "NOT_DEFINED"
        secret = "NOT_DEFINED"
      end
    end

    update_info_plist(
      xcodeproj: "PlaybookShowcase/PlaybookShowcase.xcodeproj",
      display_name: displayName,
      plist_path: ios_plist,
      block: proc do |plist|
        urlScheme = plist["CFBundleURLTypes"][0]["CFBundleURLSchemes"] = ["appcenter-#{secret}"]
      end
    )
  end

desc "Ship iOS to App Center"
lane :ship_ios_to_appcenter do |opts|
  
  app_name = "Playbook-Showcase-Beta"
  if opts[:type] == 'production'
    app_name = "Playbook-Showcase"
  end

  opts[:os] = 'ios'
  appcenter_upload(
    api_token: "bf0ae509c985f2a1102c2ad53894b35a5fa5383e",
    owner_name: "powerhome",
    owner_type: "organization",
    app_name: app_name,
    file: "#{target_ios}.ipa",
    release_notes: "#{opts[:release_notes]}",
    destinations: "Rebels",
    destination_type: "group",
    upload_build_only: false
  )
end

desc "Create Runway comment"
lane :create_runway_comment do |opts|

  runway_api_token = opts[:runway_api_token]
  runway_backlog_item_id = opts[:runway_backlog_item_id]
  github_pull_request_id = opts[:github_pull_request_id]
  type = opts[:type]
  build_number = opts[:build_number]
  release_notes = "#{opts[:release_notes]}"

  app_name = "Playbook-Showcase-Beta"
  if type == 'production'
    app_name = "Playbook-Showcase"
  end

  merged_comment = ''
  if type == 'production'
    merged_comment = "✅ MERGED ✅\n\n"
  end

  comment = <<~HEREDOC
  <p><b>#{merged_comment}#{type} build #{build_number}</b></p>
  <ul>
    <li>PlaybookShowcase-iOS: <a href=#{"https://install.appcenter.ms/orgs/powerhome/apps/#{app_name}"}>iOS</a></li>
  </ul>
  HEREDOC

  UI.message(comment)

  payload = {
    backlog_item_id: runway_backlog_item_id,
    comment: comment
  }.to_json

  response = HTTParty.post(
    'https://nitro.powerhrg.com/engineering/webhooks/runway/' + runway_api_token,
    body: payload,
    headers: { 'Content-Type' => 'application/json' }
  )

  UI.message("Runway response code: #{response.code}")
end

def keep_trying(ignore=[], interval=300, retry_counter=0, &block)
  begin
    block.call
  rescue => ex
    ignore.each do |val|
      if ex.message.include?(val)
        return
      end
    end
    retry_counter +=1
    if retry_counter <= 3
      UI.error ex.message
      UI.error "Retrying (#{retry_counter}) in #{interval/60} minutes..."
      sleep interval
      keep_trying(ignore, interval, retry_counter) { block.call }
    else
      raise ex
    end
  end
  nil
end
